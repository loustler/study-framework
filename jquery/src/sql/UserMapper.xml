<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="UserMapper">
	<resultMap type="user" id="userMap">
		<result property="userId" column="user_id" jdbcType="VARCHAR" />
		<result property="userName" column="user_name" jdbcType="VARCHAR" />
		<result property="password" column="password" jdbcType="VARCHAR" />
		<result property="role" column="role" jdbcType="VARCHAR" />
		<result property="ssn" column="ssn" jdbcType="VARCHAR" />
		<result property="phone" column="cell_phone" jdbcType="VARCHAR" />
		<result property="addr" column="addr" jdbcType="VARCHAR" />
		<result property="email" column="email" jdbcType="VARCHAR" />
		<result property="regDate" column="reg_date" jdbcType="DATE" />
	</resultMap>

	<sql id="select-user">
		SELECT
		user_id, user_name, password, role, ssn, cell_phone,
		addr, email, reg_date
		FROM users
	</sql>

	<sql id="orderby-userId">
		ORDER BY user_id DESC
	</sql>


	<insert id="addUser" parameterType="user">
		INSERT INTO users
		VALUES (
		#{userId},
		#{userName},
		#{password},
		#{role:VARCHAR},
		#{ssn:VARCHAR},
		#{phone:VARCHAR},
		#{addr:VARCHAR},
		#{email:VARCHAR},
		#{regDate:DATE}
		)
	</insert>

	<select id="getUser" parameterType="string" resultMap="userMap">
		<include refid="select-user" />
		<where>
			user_id = #{value}
		</where>
		<include refid="orderby-userId" />
	</select>

	<update id="updateUser" parameterType="user">
		UPDATE users
		<set>
			<if test="userName !=null">user_name = #{userName},</if>
			<if test="password!=null">password = #{password},</if>
			<if test="ssn!=null">ssn = #{ssn},</if>
			<if test="phone!=null">cell_phone = #{phone},</if>
			<if test="addr!=null">addr = #{addr},</if>
			<if test="email!=null">email = #{email},</if>
			<if test="regDate!=null">reg_date = regDate</if>
		</set>
		WHERE user_id = #{userId}
	</update>

	<delete id="removeUser" parameterType="string">
		DELETE
		FROM users
		WHERE
		user_id = #{userId}
	</delete>

	<select id="getUserList" resultMap="userMap" parameterType="search">
		SELECT * FROM (
		SELECT inner_table.*, ROWNUM AS row_seq
		FROM (
		<include refid="select-user" />
		<where>
			<if test="searchKeyword != null">
				<if test="searchCondition==0">
					user_id LIKE '%' || #{searchKeyword} OR
					user_id LIKE
					'%'
					||
					#{searchKeyword} || '%' OR
					user_id LIKE #{searchKeyword} ||
					'%'
				</if>
				<if test="searchCondition==1">
					user_name LIKE '%' || #{searchKeyword} OR
					user_name
					LIKE
					'%'
					|| #{searchKeyword} || '%' OR
					user_name LIKE
					#{searchKeyword} ||
					'%'
				</if>
			</if>
			<if test="sort != 0">
				<if test="sort == 100">
					ORDER BY user_id
				</if>

				<if test="sort == 101">
					ORDER BY user_id DESC
				</if>
			</if>
		</where>

		)
		inner_table

		WHERE ROWNUM <![CDATA[ < ]]>
		= #{currentPage} * #{pageSize}
		)
		WHERE
		row_seq
		BETWEEN (( #{currentPage}
		-1 ) * #{pageSize} +1 ) AND
		( #{currentPage}
		* #{pageSize} )


	</select>

	<select id="countData" resultType="int" parameterType="search">
		SELECT
		COUNT(*)
		FROM users
		<where>
			<choose>
				<when test="searchCondition==0">
					user_id LIKE '%' || #{searchKeyword} OR
					user_id LIKE
					'%' || #{searchKeyword} || '%' OR
					user_id LIKE #{searchKeyword} ||
					'%'
				</when>

				<when test="searchCondition==1">
					user_name LIKE '%' || #{searchKeyword} OR
					user_name
					LIKE '%' || #{searchKeyword} || '%' OR
					user_name LIKE
					#{searchKeyword} || '%'
				</when>
			</choose>
		</where>
	</select>

</mapper>